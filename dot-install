#!/bin/sh

# Copyright (c) 2012, Diego Souza
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#   * Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#   * Neither the name of the <ORGANIZATION> nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE

self=$0

repo=
root=~
rcfile=~/.dot/rc
verbosity=2
logfile=/dev/null
bundle=
module=
nopull=
force=

bin_mktemp=${bin_mktemp:-mktemp}
bin_unlink=${bin_unlink:-unlink}
bin_md5sum=${bin_md5sum:-md5sum}
bin_mkdir=${bin_mkdir:-mkdir}
bin_cat=${bin_cat:-cat}
bin_cut=${bin_cut:-cut}
bin_ln=${bin_ln:-ln}
bin_grep=${bin_grep:-grep}
bin_cp=${bin_cp:-cp}
bin_git=${bin_git:-git}
bin_expr=${bin_expr:-expr}
bin_env=${bin_env:-env}
bin_find=${bin_find:-find}
bin_dirname=${bin_dirname:-dirname}
bin_rm=${bin_rm:-rm}
bin_sudo=${bin_sudo:-sudo}
bin_tar=${bin_tar:-tar}
bin_sort=${bin_sort:-sort}
bin_uniq=${bin_uniq:-uniq}
bin_touch=${bin_touch:-touch}
bin_ls=${bin_ls:-ls}

dot_install_mark=".dot-install.mark"

exec 3>&1

cd /

dot_dryrun_mode ()
{
  test -n "$dryrun"
}

dot_dye ()
{
  dot_finalize

  if [ -n "$1" ]
  then
    echo "ERROR: $@" >&3
  else
    while read line
    do
      echo "ERROR: $line" >&3
    done
  fi
  exit -1
}

dot_quit ()
{
  dot_stdout "$@"
  exit 0
}

dot_loadrc ()
{
  test -f "$rcfile" && . "$rcfile"
}

dot_ensurebin ()
{
  local var prg

  while [ "$#" -gt 0 ]
  do
    var=$1
    prg=$2

    if ! command -V "$prg" 2>/dev/null >/dev/null
    then
      dot_dye <<EOF 
Could not find \`$prg' program. You may provide the right location for
this using:

  $ env $var=/path/to/file $self ...

Additionaly, you may create or edit a file named $rcfile defining this
variable (shell syntax), as follows:

  $ echo $var=/path/to/file >>$rcfile
EOF
    fi
    shift 2
  done
}

dot_checkbin ()
{
  local var prg res
  res=0
  while [ "$#" -gt 0 ]
  do
    var=$1
    prg=$2
    msg=$3

    if ! command -V "$prg" 2>/dev/null >/dev/null
    then
      res=1
      dot_stdout <<EOF 
$msg

You may provide the right location for this using:

  $ env $var=/path/to/file $self ...

Additionaly, you may create or edit a file named $rcfile defining this
variable (shell syntax), as follows:

  $ echo $var=/path/to/file >>$rcfile
EOF
    fi
    shift 3
  done

  return $res
}

dot_env_set ()
{
  local key expr size val

  dot_ensurebin bin_expr "$bin_expr"

  key="$1"
  expr="$2"
  size=$($bin_expr ${#key} + 2)

  if $bin_expr "$expr" : "^$key=[:a-zA-Z0-9_@/\.\-]*$" >/dev/null
  then
    val=$(echo -n "$expr" | $bin_cut -c $size-)
    eval $key=\"$val\"
  fi
}

dot_env_add ()
{
  local key expr cval

  dot_ensurebin bin_expr "$bin_expr"

  key="$1"
  expr="$2"

  if $bin_expr "$expr" : "^$key=" >/dev/null
  then
    cval=$(eval echo \$$key)
    dot_env_set "$key" "$expr"
    if [ -n "$cval" ]
    then
      eval $key=\"\$\{$key\} $cval\"
    fi
  fi
}

dot_loadenv ()
{
  local IFS size

  for expr in "$@"
  do
    for key in verbosity rcfile repo root logfile dryrun nopull force
    do
      dot_env_set $key "$expr"
    done

    for key in bundle module
    do
      dot_env_add $key "$expr"
    done
  done

  [ -z "$repo" ]                   && read -p "repo: " repo
  [ -z "$bundle" -a -z "$module" ] && read -p "bundle: " bundle
  [ -z "$bundle" -a -z "$module" ] && read -p "module: " module
}

dot_chkenv ()
{
  [ -z "$repo" ]                   && dot_quit "repo is required"
  [ -z "$bundle" -a -z "$module" ] && dot_quit "either bundle or module (or both) is required"

  dot_log_2 "dot-install"
  dot_log_2 "============================================================================"
  dot_log_2 "     repo: $repo"
  dot_log_2 "     root: $root"
  dot_log_2 "   bundle: $bundle"
  dot_log_2 "   module: $module"
  dot_log_2 "   rcfile: $rcfile"
  dot_log_2 "verbosity: $verbosity"
  dot_log_2 "  logfile: $logfile"
  dot_log_2 "  dotroot: $dotroot"
  dot_log_2 "   nopull: $nopull"
  dot_log_2 "    force: $force"
  dot_log_2 "   dryrun: $dryrun"
  dot_log_2 "----------------------------------------------------------------------------"
  dot_log_2 "   backup: $dotbckp"
  dot_log_2 "  stgroot: $stgroot"
  dot_log_2 "============================================================================"

  return 0
}

dot_initialize ()
{
  local hash

  if [ "$logfile" != "-" ]
  then
    exec >$logfile 2>&1
  fi

  dot_ensurebin              \
    bin_cut "$bin_cut"       \
    bin_mkdir "$bin_mkdir"   \
    bin_mktemp "$bin_mktemp" \
    bin_md5sum "$bin_md5sum"

  uniqid=$(echo "$repo" | $bin_md5sum - | $bin_cut -d\  -f1)
  dotroot=~/.dot/repositories/$uniqid
  stgroot=$($bin_mktemp -d /tmp/dot-install.XXXXXXX)
  dotbckp=$($bin_mktemp /tmp/dot-backup.XXXXXXX)

  for d in "$stgroot" "$root"
  do
    if [ ! -d "$d" ]
    then
      dot_dye "directory not found: $d"
    fi
  done

  $bin_mkdir "$stgroot/dist"
  $bin_mkdir "$stgroot/root"

  if [ ! -r "$dotbckp" ]
  then
    dot_dye "could not initialize backup: $dotbckp"
  fi

  if [ -n "$nopull" ]
  then
    dot_log2 "wiping out $dotroot"
    [ -d "$dotroot" ] && $bin_rm -r -f "$dotroot"
  fi
}

dot_finalize ()
{
  local rm
  rm=$bin_rm

  if command -v $bin_rm >/dev/null
  then
    rm=$bin_rm
  else
    rm=/bin/rm
  fi

  test -d "$stgroot" && $rm -r -f "$stgroot"
  test -f "$dotbckp" && $rm -f "$dotbckp"
}

dot_fetch ()
{
  dot_log_1 "cloning : $repo ~> $dotroot"
  dot_ensurebin        \
    bin_git "$bin_git" \
    bin_env "$bin_env" \
    bin_rm "$bin_rm"


  if [ -d "$dotroot" ]
  then
    dot_log_2 "using git pull"               && \
    (cd "$dotroot"                           && \
       $bin_git pull --ff-only origin master && \
       $bin_git submodule init               && \
       $bin_git submodule update
    ) || $bin_rm -r -f "$dotroot"
  fi

  if [ ! -d "$dotroot" ]
  then
    dot_log_2 "using git clone"            && \
    $bin_git clone "$repo" "$dotroot"      && \
    (cd "$dotroot"                         && \
       $bin_git submodule init             && \
       $bin_git submodule update)
  fi

  if [ ! -d "$dotroot" ]
  then
    dot_dye "directory not found: $dotroot"
  fi
}

dot_lsmod_1 ()
{
  local topdir
  topdir=$1

  dot_ensurebin           \
    bin_find "$bin_find"  \
    bin_dirname "$bin_dirname"

  $bin_find -L "$topdir" -wholename "$dotroot/*/dist" -exec "$bin_dirname" \{\} \;
}

dot_lsmod ()
{
  if [ -n "$bundle" ]
  then
    for b in $bundle
    do
      dot_lsmod_1 "$dotroot/bundles/$b"
    done
  fi

  if [ -n "$module" ]
  then
    for m in $module
    do
      dot_lsmod_1 "$dotroot/modules/$m"
    done
  fi
}

dot_run_hook () {
  local mod hook fakeroot
  mod=$1
  hook=$2
  fakeroot=$3

  if [ -f "$mod/hook/$hook" ]
  then
    dot_log_2 "running hook: $hook"
    if ! (cd $mod && $bin_env dot_mod=$mod    \
                              dot_hook=$hook  \
                              dot_root=$fakeroot "$mod/hook/$hook")
    then
      dot_stdout "$mod/hook/$hook: failure"
      return 1
    fi
  fi
  return 0
}

dot_stage ()
{
  dot_ensurebin          \
    bin_tar "$bin_tar"   \
    bin_sort "$bin_sort" \
    bin_uniq "$bin_uniq" \
    bin_touch "$bin_touch"

  if [ -n "$bundle" -a -n "$module" ]
  then
    dot_log_1 "stgmods : @{$bundle} +{$module} ~> $stgroot"
  elif [ -n "$bundle" ]
  then
    dot_log_1 "stgmods : @{$bundle} ~> $stgroot"
  else
    dot_log_1 "stgmods : +{$module} ~> $stgroot"
  fi

  for mod in $(dot_lsmod | $bin_sort | $bin_uniq)
  do
    modname=${mod#$dotroot}
    dot_log_2 "staging ${modname#/modules}"

    dot_run_hook "$mod" pre "$stgroot/dist" && {

      if [ -d "$mod/dist" ]
      then
        (cd "$mod/dist" && $bin_tar -c -h -f - .) | $bin_tar -C "$stgroot/dist" -x -v -f - | dot_log_3
      fi

      if [ -d "$mod/dist-root" ]
      then
        (cd "$mod/dist-root" && $bin_tar -c -h -f - .) | $bin_tar -C "$stgroot/root" -x -v -f - | dot_log_3
      fi

      dot_run_hook "$mod" post "$stgroot/dist"
    }
  done

  $bin_touch "$stgroot/$dot_install_mark"
}

dot_bck_save ()
{
  local backup

  dot_ensurebin        \
    bin_cat "$bin_cat" \
    bin_tar "$bin_tar"

  dot_log_1 "bcksave : $dotbckp"
  for m in $(dot_lsmod)
  do
    if [ -f "$m/save" ]
    then
      dot_log_2 "${m#$dotroot}"
      for f in $($bin_cat "$m/save")
      do
        f=${f#/}
        if [ -f "$root/$f" ]
        then
          if [ -s "$dotbckp" ]
          then
            (cd $root && $bin_tar -u -v -f "$dotbckp" "$f" | dot_log_2)
          else
            (cd $root && $bin_tar -c -v -f "$dotbckp" "$f" | dot_log_2)
          fi
        fi
      done
    fi
  done
}

dot_bck_load ()
{
  dot_log_1 "bckload : $dotbckp"
  if [ -s "$dotbckp" ]
  then
    $bin_tar -C "$root" -x -v -f "$dotbckp" | dot_log_2
  fi
}

dot_install ()
{
  local has_sudo tar_args
  dot_log_1 "insmods : $root"

  if dot_dryrun_mode
  then
    dot_quit <<EOF
Refusing to install [dryrun]

The files where staged into:
  * $stgroot

The files that will be preserved:
  * $dotbckp

Remember removing them when you are done!
EOF
  fi

  dot_ensurebin          \
    bin_find "$bin_find" \
    bin_ls "$bin_ls"     \
    bin_rm "$bin_rm"

  dot_checkbin bin_sudo "$bin_sudo" "WARNING: cant install dot-root files, sudo \`$bin_sudo' not found!"
  has_sudo=$?

  if [ -d "$stgroot" -a -f "$stgroot/$dot_install_mark" ]
  then
    # cleanup
    for top in $($bin_find "$stgroot/dist" -mindepth 1 -maxdepth 1 -type d)
    do
      top=${top#$stgroot/dist/}
      dot_log_2 "removing $root/$top"
      if [ -d "$root/$top" ]
      then
        $bin_rm -r -v -f "$root/$top" | dot_log_3
      fi
    done

    # install
    dot_log_2 "installing (dist)"
    (cd "$stgroot/dist" && $bin_tar -c -f - .) | $bin_tar -C "$root" -x -v -f - | dot_log_3

    dot_log_2 "installing (dist-root)"
    if [ "$has_sudo" -eq 0 ]
    then
      [ -z "$force" ] && tar_args="-w"
      if [ -n "$($bin_ls -A $stgroot/root)" ]
      then
        (cd "$stgroot/root" && $bin_tar -c -f - .) | $bin_sudo $bin_tar --no-overwrite-dir -C / -x -f - $tar_args >&3
      fi
    fi
  else
    dot_log_1 "refusing to install using this stgroot: $stgroot"
  fi
}

dot_stdout ()
{
  if [ -z "$1" ]
  then
    dot_ensurebin bin_cat "$bin_cat"
    $bin_cat >&3
  else
    echo "$@" >&3
  fi

  return 0
}

dot_devnull ()
{
  if [ -z "$1" ]
  then
    dot_ensurebin bin_cat "$bin_cat"
    $bin_cat >/dev/null
  fi

  return 0
}

dot_log_3 ()
{
  if expr "$verbosity" \> 2 >/dev/null
  then
    dot_stdout "$@"
  else
    dot_devnull "$@"
  fi
}

dot_log_2 ()
{
  if expr "$verbosity" \> 1 >/dev/null
  then
    dot_stdout "$@"
  else
    dot_devnull "$@"
  fi
}

dot_log_1 ()
{
  if expr "$verbosity" \> 0 >/dev/null
  then
    dot_stdout "$@"
  else
    dot_devnull "$@"
  fi
}

dot_help ()
{
  dot_quit <<EOF
Usage: $self [OPTION]...
This script will download a git repository, namely a dot repository,
and will install all modules that match a given bundle or module
specification.

Refer to
https://github.com/dgvncsz0f/dot-install/blob/stable/README.rst for
information about the repository layout.

Mandatory OPTIONS:
 bundle  The bundle to install. May be used in conjunction with module.

 module  The module to install. May be used in conjunction with bundle.

   repo  The git repository to clone [default: $repo]

At least one bundle or module must be given.

Other OPTIONS:

      root  The directory to install the files [default: $root]

    rcfile  The file to load at startup. You may use this to set defaults

 verbosity  Adjusts the script verbosity. Ranges from 0 [no output] to 3
            [very chatty] logfile=LOGFILE

            The file that will capture the output of the commands, like
            git for instance. This is a good place to look for errors.

     nopull If set it never use /git pull/ and always perform /git
            clone/.

      force When using dist-root, a confirmation is asked before every
            action. If you don't want this, set force=true

     dryrun If defined, it only stages files, but do not install
            them. This is usually for development purposes, but you
            may use to double check the files that will be installed.
EOF
}

dot_trap_int ()
{
  dot_finalize
  exit 130
}

dot_trap_int2 ()
{
  dot_stdout <<EOF
Aye!

Interrupting in the middle of an install operation. The staged and
backup files have not been removed. If you want to restore the backup
(the files the modules say to keep), issue:

  # stgdir: $stgroot
  $ tar -C $root -x $dotbckp

Good Luck and remember removing them!
EOF
  exit 131
}

trap dot_trap_int INT

[ "$1" = "help" -o "$1" = "-help" -o "$1" = "--help" -o "$1" = "-h" ] && dot_help

dot_loadrc
dot_loadenv "$@"
dot_initialize
dot_chkenv && {
  dot_fetch
  dot_stage
  dot_bck_save
  [ -s "$dotbckp" ] && trap dot_trap_int2 INT
  dot_install
  dot_bck_load
}
dot_finalize
